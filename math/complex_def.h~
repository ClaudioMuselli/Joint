#ifndef __COMPLEXDEF_H__
#define __COMPLEXDEF_H__

#include <complex>
#include <gsl/gsl_math.h>
#include <gsl/gsl_sf_gamma.h>
#include <gsl/gsl_sf_log.h>
#include <gsl/gsl_sf_zeta.h>
#include <gsl/gsl_sf_dilog.h>
#include <gsl/gsl_sf_result.h>

std::complex<long double> operator*(const std::complex<long double>& a, const double& b);

std::complex<long double> operator*(const double& a,const std::complex<long double>& b);

std::complex<long double> operator/(const std::complex<long double>& a, const double& b);

std::complex<long double> operator/(const double& a,const std::complex<long double>& b);

std::complex<long double> operator-(const std::complex<long double>& a, const double& b);

std::complex<long double> operator-(const double& a,const std::complex<long double>& b);

std::complex<long double> operator+(const std::complex<long double>& a, const double& b);

std::complex<long double> operator+(const double& a,const std::complex<long double>& b);

std::complex<long double> pow(const long double& a, const std::complex<long double> &b);
std::complex<long double> pow(const std::complex<long double>& a, const long double &b);
std::complex<long double> pow(const std::complex<long double>& a, const std::complex<long double> &b);

//Useful Math functions
long double log_r(long double x);
long double dilog_r(long double x);

const std::complex<long double> II(0.0,1.0);
std::complex<long double> log_c(std::complex<long double> z);
std::complex<long double> dilog_c(std::complex<long double> z);

std::complex<long double> Log(std::complex<long double> N){
  return(std::log(N));
  }

 //Complex Euler Gamma
  std::complex<long double> LogGamma(std::complex<long double> z){
 int g=7;
 double p[9];
 p[0]=0.99999999999980993;
 p[1]=676.5203681218851;
 p[2]=-1259.1392167224028;
 p[3]=771.32342877765313;
 p[4]=-176.61502916214059;
 p[5]=12.507343278686905;
 p[6]=-0.13857109526572012;
 p[7]=9.9843695780195716e-6;
 p[8]=1.5056327351493116e-7;
 std::complex<long double>sum,ris;
 z -=1;
 sum=p[0];
 for(int i=1;i<(g+2);i++)
   sum += p[i]/(z+i);
 ris=0.5*gsl_sf_log(2*M_PI)+(z+0.5)*log(z+g+0.5)-(z+g+0.5)+log(sum);
 return ris;
  }

  std::complex<long double> CGamma(std::complex<long double> z){
  return( std::exp(LogGamma(z)));
  }

  //Gamma Derivatives of order i complex
  std::complex<long double> PolyGamma(int i, std::complex<long double> z){
  if (i == 0) {
    std::complex<long double> SUB = 0. ;
    std::complex<long double> ZZ = z;
    if(std::abs(std::imag(ZZ))<10.) { // if too close to the real axis...
    label1:
      if(std::real(ZZ)<10.) { // ...use recurrence relation to push real(z) large enough
	SUB = SUB - 1./ ZZ;
	ZZ = ZZ + 1.;
	goto label1;
      }
    }
    std::complex<long double> RZ = 1./ ZZ;
    std::complex<long double> DZ = RZ * RZ;
    // SUB + asympt expansion (Abramowitz, Stengun, 6.3.18)
    return (SUB + std::log(ZZ) - 0.5 * RZ - DZ/5040. * ( 420.+ DZ * ( - 42. + DZ * (20. - 21. * DZ) ) ));
  }
  else {
     int K1, K2;
     std::complex<long double> SUB = 0. , SUBM;
     std::complex<long double> ZZ = z;
     if(std::abs(std::imag(ZZ))<10.) { // if too close to the real axis...
      label2:
      SUBM = -1./ZZ;
      for(K1=1; K1<=i; K1++) {
	SUBM = - SUBM * K1 / ZZ;
      }
      if(std::real(ZZ)<10.) { // ...use recurrence relation to push real(z) large enough
	SUB = SUB + SUBM;
	ZZ = ZZ + 1.;
	goto label2;
      }
    }
    // Expansion coefficients for the first derivative
    long double A1 =  1.;
    long double A2 =  1./2.;
    long double A3 =  1./6.;
    long double A4 = -1./30.;
    long double A5 =  1./42.;
    long double A6 = -1./30.;
    long double A7 =  5./66.;
    // Expansion coefficients for the higher derivatives
    if(i>1) {
      for(K2=2;K2<=i;K2++){
	A1 = A1 * (1.*K2-1.);
	A2 = A2 *  1.*K2;
	A3 = A3 * (1.*K2+1.);
	A4 = A4 * (1.*K2+3.);
	A5 = A5 * (1.*K2+5.);
	A6 = A6 * (1.*K2+7.);
	A7 = A7 * (1.*K2+9.);
      }
    }
    std::complex<long double> RZ = 1./ ZZ;
    std::complex<long double> DZ = RZ * RZ;
    // SUB + asympt expansion (Abramowitz, Stengun, 6.4.11)
    return (SUB + std::pow(-1.,i+1) * std::pow(RZ,i) * ( A1 + RZ * (A2 + RZ * (A3 + DZ * (A4 + DZ * (A5 + DZ * (A6 + A7 * DZ ))))) ));
  }
  }

#endif
